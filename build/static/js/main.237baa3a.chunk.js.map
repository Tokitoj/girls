{"version":3,"sources":["utils/pinata.js","utils/interact.js","Minter.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","axios","pinJSONToIPFS","JSONBody","a","post","headers","pinata_api_key","process","pinata_secret_api_key","then","response","success","pinataUrl","data","IpfsHash","catch","error","console","log","message","web3","createAlchemyWeb3","contractABI","contractAddress","connectWallet","window","ethereum","enable","address","obj","connectedStatus","status","mintNFT","url","name","description","trim","metadata","Object","image","pinataResponse","tokenURI","eth","Contract","contract","transactionParameters","to","from","selectedAddress","methods","encodeABI","request","method","params","txHash","Minter","props","useState","isConnected","setConnectedStatus","walletAddress","setWallet","setStatus","setName","setDescription","setURL","useEffect","accounts","length","connectWalletPressed","walletResponse","onMintPressed","className","id","onClick","String","substring","type","placeholder","onChange","event","target","value","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.237baa3a.chunk.js","sourcesContent":["require('dotenv').config();\r\nconst key = process.env.REACT_APP_PINATA_KEY;\r\nconst secret = process.env.REACT_APP_PINATA_SECRET;\r\n\r\n\r\nconst axios = require('axios');\r\n\r\nexport const pinJSONToIPFS = async(JSONBody) => {\r\n    const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\r\n    //making axios POST request to Pinata ⬇️\r\n    return axios \r\n        .post(url, JSONBody, {\r\n            headers: {\r\n                pinata_api_key: key,\r\n                pinata_secret_api_key: secret,\r\n            }\r\n        })\r\n        .then(function (response) {\r\n           return {\r\n               success: true,\r\n               pinataUrl: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\r\n           };\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error)\r\n            return {\r\n                success: false,\r\n                message: error.message,\r\n            }\r\n           \r\n    });\r\n};","import {pinJSONToIPFS} from './pinata.js'\r\nrequire('dotenv').config();\r\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(alchemyKey); \r\n\r\nconst contractABI = require('../contract-abi.json')\r\nconst contractAddress = \"0x4C4a07F737Bf57F6632B6CAB089B78f62385aCaE\";\r\n\r\nexport const connectWallet = async () => {\r\n    if (window.ethereum) { //check if Metamask is installed\r\n          try {\r\n              const address = await window.ethereum.enable(); //connect Metamask\r\n              const obj = {\r\n                      connectedStatus: true,\r\n                      status: \"\",\r\n                      address: address\r\n                  }\r\n                  return obj;\r\n               \r\n          } catch (error) {\r\n              return {\r\n                  connectedStatus: false,\r\n                  status: \"🦊 Connect to Metamask using the button on the top right.\"\r\n              }\r\n          }\r\n          \r\n    } else {\r\n          return {\r\n              connectedStatus: false,\r\n              status: \"🦊 You must install Metamask into your browser: https://metamask.io/download.html\"\r\n          }\r\n        } \r\n  };\r\n  export const mintNFT = async(url, name, description) => {\r\n    \r\n    //error handling\r\n    if (url.trim() == \"\" || (name.trim() == \"\" || description.trim() == \"\")) { \r\n        return {\r\n            success: false,\r\n            status: \"❗Please make sure all fields are completed before minting.\",\r\n        }\r\n    }\r\n  \r\n    //make metadata\r\n    const metadata = new Object();\r\n    metadata.name = name;\r\n    metadata.image = url;\r\n    metadata.description = description;\r\n\r\n    //pinata pin request\r\n    const pinataResponse = await pinJSONToIPFS(metadata);\r\n    if (!pinataResponse.success) {\r\n        return {\r\n            success: false,\r\n            status: \"😢 Something went wrong while uploading your tokenURI.\",\r\n        }\r\n    } \r\n    const tokenURI = pinataResponse.pinataUrl;  \r\n\r\n    //load smart contract\r\n    window.contract = await new web3.eth.Contract(contractABI, contractAddress);//loadContract();\r\n\r\n    //set up your Ethereum transaction\r\n    const transactionParameters = {\r\n        to: contractAddress, // Required except during contract publications.\r\n        from: window.ethereum.selectedAddress, // must match user's active address.\r\n        'data': window.contract.methods.mintNFT(window.ethereum.selectedAddress, tokenURI).encodeABI() //make call to NFT smart contract \r\n    };\r\n  \r\n    //sign transaction via Metamask\r\n    try {\r\n        const txHash = await window.ethereum\r\n            .request({\r\n                method: 'eth_sendTransaction',\r\n                params: [transactionParameters],\r\n            });\r\n        return {\r\n            success: true,\r\n            status: \"✅ Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" + txHash\r\n        }\r\n    } catch (error) {\r\n        return {\r\n            success: false,\r\n            status: \"😥 Something went wrong: \" + error.message\r\n        }\r\n    }\r\n}","import { useEffect, useState } from \"react\";\r\nimport { connectWallet, mintNFT } from \"./utils/interact.js\";;\r\n\r\nconst Minter = (props) => {\r\n\r\n  //State variables\r\n  const [isConnected, setConnectedStatus] = useState(false);\r\n  const [walletAddress, setWallet] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [url, setURL] = useState(\"\");\r\n \r\n  useEffect(async () => {\r\n    if (window.ethereum) { //if Metamask installed\r\n      try {\r\n        const accounts = await window.ethereum.request({ method: \"eth_accounts\" }) //get Metamask wallet\r\n        if (accounts.length) { //if a Metamask account is connected\r\n          setConnectedStatus(true);\r\n          setWallet(accounts[0]);\r\n        } else {\r\n          setConnectedStatus(false);\r\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\r\n        }\r\n      } catch {\r\n        setConnectedStatus(false);\r\n        setStatus(\r\n          \"🦊 Connect to Metamask using the top right button. \" +\r\n            walletAddress\r\n        );\r\n      }\r\n    }  \r\n  });\r\n\r\n  const connectWalletPressed = async () => {\r\n    const walletResponse = await connectWallet();\r\n    setConnectedStatus(walletResponse.connectedStatus);\r\n    setStatus(walletResponse.status);\r\n    if (isConnected) {\r\n      setWallet(walletAddress);\r\n    }\r\n  };\r\n\r\n  const onMintPressed = async () => {\r\n    const { status } = await mintNFT(url, name, description);\r\n    setStatus(status);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Minter\">\r\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\r\n        {isConnected ? (\r\n          \"👛 Connected: \" +\r\n          String(walletAddress).substring(0, 6) +\r\n          \"...\" +\r\n          String(walletAddress).substring(38)\r\n        ) : (\r\n          <span>👛 Connect Wallet</span>\r\n        )}\r\n      </button>\r\n\r\n      <br></br>\r\n      <h1 id=\"title\">  Kamora NFT Minter</h1>\r\n      <p>\r\n        Simply add your photo/music/video/asset link, name, and description, then press \"Mint.\"\r\n      </p>\r\n      <form>\r\n        <h2>  Link to asset: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"e.g. https://gateway.pinata.cloud/ipfs/<hash>\"\r\n          onChange={(event) => setURL(event.target.value)}\r\n        />\r\n        <h2>  Name: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"e.g. My first NFT!\"\r\n          onChange={(event) => setName(event.target.value)}\r\n        />\r\n        <h2> Description: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"e.g. Even cooler than cryptokitties ;)\"\r\n          onChange={(event) => setDescription(event.target.value)}\r\n        />\r\n      </form>\r\n      <button id=\"mintButton\" onClick={onMintPressed}>\r\n        Mint NFT\r\n      </button>\r\n      <p id=\"status\">\r\n        {status}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Minter;\r\n","import './App.css';\r\nimport Minter from './Minter'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Minter></Minter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}